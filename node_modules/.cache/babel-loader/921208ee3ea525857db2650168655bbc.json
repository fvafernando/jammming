{"ast":null,"code":"var clientId = 'db3a8874dd2d4eda92758c0e163dc98d'; //const clientSecret = '2eb212bba09640fa9e08432ca4ad9b4a';\n\nvar redirectURI = 'http://localhost:3000';\nvar accessToken = '';\nvar Spotify = {\n  expirationTime: '',\n  getAccessTokenFromURL: function getAccessTokenFromURL() {\n    console.log(\"getAccessTokenFromURL\");\n    var currentURL = new URL(window.location.href);\n    console.log(currentURL);\n    this.expirationTime = currentURL.searchParams.get(\"expires_in\");\n    return currentURL.searchParams.get(\"access_token\");\n  },\n  getAccessToken: function getAccessToken() {\n    if (accessToken || this.getAccessTokenFromURL()) {\n      console.log(\"Found it!\");\n      return accessToken;\n    } else {\n      console.log(\"Needs access token\");\n      window.location.replace(\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI));\n    }\n  },\n  search: function search(term) {\n    accessToken = this.getAccessToken();\n    console.log(accessToken);\n    /*\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n    header: {\n    Authorisation: `Bearer ${accessToken}`\n    }\n    }).then(response => {\n    return response.json();\n    }).then(jsonResponse => {\n    if(jsonResponse.tracks) {\n    return jsonResponse.tracks.map(track => ({\n    id: track.id,\n    name: track.name,\n    artist: track.artists[0].name,\n    album: track.album.name,\n    uri: track.uri\n    }));\n    }\n    });*/\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/fernandovillamarin/Documents/Studies/Codecademy - JS intensive/jammming/src/util/Spotify.js"],"names":["clientId","redirectURI","accessToken","Spotify","expirationTime","getAccessTokenFromURL","console","log","currentURL","URL","window","location","href","searchParams","get","getAccessToken","replace","search","term"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,kCAAjB,C,CACA;;AACA,IAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAW,GAAG,EAAlB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,cAAc,EAAE,EADF;AAEdC,EAAAA,qBAFc,mCAEU;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAAnB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACA,SAAKJ,cAAL,GAAsBI,UAAU,CAACK,YAAX,CAAwBC,GAAxB,CAA4B,YAA5B,CAAtB;AACA,WAAON,UAAU,CAACK,YAAX,CAAwBC,GAAxB,CAA4B,cAA5B,CAAP;AACD,GARa;AASdC,EAAAA,cATc,4BASG;AACf,QAAIb,WAAW,IAAI,KAAKG,qBAAL,EAAnB,EAAiD;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAOL,WAAP;AACD,KAHD,MAGO;AACLI,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAG,MAAAA,MAAM,CAACC,QAAP,CAAgBK,OAAhB,4DAA4EhB,QAA5E,4EAAsJC,WAAtJ;AACD;AACF,GAjBa;AAkBdgB,EAAAA,MAlBc,kBAkBPC,IAlBO,EAkBD;AACXhB,IAAAA,WAAW,GAAG,KAAKa,cAAL,EAAd;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AAAyB;;;;;;;;;;;;;;;;;;AAkB1B;AAtCa,CAAhB;AAyCA,eAAeC,OAAf","sourcesContent":["const clientId = 'db3a8874dd2d4eda92758c0e163dc98d';\n//const clientSecret = '2eb212bba09640fa9e08432ca4ad9b4a';\nconst redirectURI = 'http://localhost:3000';\nlet accessToken = '';\n\nconst Spotify = {\n  expirationTime: '',\n  getAccessTokenFromURL() {\n    console.log(\"getAccessTokenFromURL\");\n    const currentURL = new URL(window.location.href);\n    console.log(currentURL);\n    this.expirationTime = currentURL.searchParams.get(\"expires_in\");\n    return currentURL.searchParams.get(\"access_token\");\n  },\n  getAccessToken() {\n    if (accessToken || this.getAccessTokenFromURL()) {\n      console.log(\"Found it!\");\n      return accessToken;\n    } else {\n      console.log(\"Needs access token\");\n      window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`);\n    }\n  },\n  search(term) {\n    accessToken = this.getAccessToken();\n    console.log(accessToken);/*\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      header: {\n        Authorisation: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if(jsonResponse.tracks) {\n        return jsonResponse.tracks.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });*/\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}