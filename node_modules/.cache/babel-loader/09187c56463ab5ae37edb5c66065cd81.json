{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fernandovillamarin/Documents/Studies/Codecademy - JS intensive/jammming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fernandovillamarin/Documents/Studies/Codecademy - JS intensive/jammming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = 'db3a8874dd2d4eda92758c0e163dc98d'; //const clientSecret = '2eb212bba09640fa9e08432ca4ad9b4a';\n\nvar redirectURI = 'http://localhost:3000'; //let accessToken = '';\n\nvar Spotify = {\n  expirationTime: '',\n  accessToken: '',\n  getAccessTokenFromURL: function getAccessTokenFromURL() {\n    console.log(\"getAccessTokenFromURL\");\n    this.accessToken = window.location.href.match(\"/.*access_token=([a-zA-Z0-9_-]*)&.*$\")[1];\n    console.log(this.accessToken); //console.log(currentURL.searchParams.get(\"expires_in\"));\n    //console.log(currentURL.searchParams.get(\"access_token\"));\n    //this.expirationTime = currentURL.searchParams.get(\"expires_in\");\n    //this.accessToken = currentURL.searchParams.get(\"access_token\");\n    //console.log(this.accessToken);\n\n    return this.accessToken;\n  },\n  getAccessToken: function getAccessToken() {\n    if (this.accessToken || this.getAccessTokenFromURL()) {\n      console.log(\"Found it!\");\n      return this.accessToken;\n    } else {\n      console.log(\"Needs access token\");\n      window.location.replace(\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI));\n    }\n  },\n  search: function () {\n    var _search = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(term) {\n      var response, jsonResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              this.accessToken = this.getAccessToken();\n              console.log(this.accessToken);\n              _context.next = 5;\n              return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n                headers: {\n                  Authorization: \"Bearer \".concat(this.accessToken)\n                }\n              });\n\n            case 5:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 9;\n              return response.json();\n\n            case 9:\n              jsonResponse = _context.sent;\n              console.log(jsonResponse);\n              return _context.abrupt(\"return\", jsonResponse.tracks.items.map(function (track) {\n                return {\n                  id: track.id,\n                  name: track.name,\n                  artist: track.artists[0].name,\n                  album: track.album.name,\n                  uri: track.uri\n                };\n              }));\n\n            case 12:\n              throw new Error('Request Failed!');\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.message);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 15]]);\n    }));\n\n    return function search(_x) {\n      return _search.apply(this, arguments);\n    };\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/fernandovillamarin/Documents/Studies/Codecademy - JS intensive/jammming/src/util/Spotify.js"],"names":["clientId","redirectURI","Spotify","expirationTime","accessToken","getAccessTokenFromURL","console","log","window","location","href","match","getAccessToken","replace","search","term","fetch","headers","Authorization","response","ok","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","Error","message"],"mappings":";;AAAA,IAAMA,QAAQ,GAAG,kCAAjB,C,CACA;;AACA,IAAMC,WAAW,GAAG,uBAApB,C,CACA;;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,cAAc,EAAE,EADF;AAEdC,EAAAA,WAAW,EAAE,EAFC;AAGdC,EAAAA,qBAHc,mCAGU;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,SAAKH,WAAL,GAAmBI,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sCAA3B,EAAmE,CAAnE,CAAnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,WAAjB,EAHsB,CAItB;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKA,WAAZ;AACD,GAba;AAcdQ,EAAAA,cAdc,4BAcG;AACf,QAAI,KAAKR,WAAL,IAAoB,KAAKC,qBAAL,EAAxB,EAAsD;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,KAAKH,WAAZ;AACD,KAHD,MAGO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBI,OAAhB,4DAA4Eb,QAA5E,4EAAsJC,WAAtJ;AACD;AACF,GAtBa;AAuBRa,EAAAA,MAvBQ;AAAA;AAAA;AAAA,8CAuBDC,IAvBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBV,mBAAKX,WAAL,GAAmB,KAAKQ,cAAL,EAAnB;AACAN,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,WAAjB;AA1BU;AAAA,qBA2BaY,KAAK,0DAAmDD,IAAnD,GAA2D;AACrFE,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAY,KAAKd,WAAjB;AADN;AAD4E,eAA3D,CA3BlB;;AAAA;AA2BJe,cAAAA,QA3BI;;AAAA,mBAiCNA,QAAQ,CAACC,EAjCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAkCmBD,QAAQ,CAACE,IAAT,EAlCnB;;AAAA;AAkCFC,cAAAA,YAlCE;AAmCRhB,cAAAA,OAAO,CAACC,GAAR,CAAYe,YAAZ;AAnCQ,+CAoCDA,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8B,UAAAC,KAAK;AAAA,uBAAK;AAC7CC,kBAAAA,EAAE,EAAED,KAAK,CAACC,EADmC;AAE7CC,kBAAAA,IAAI,EAAEF,KAAK,CAACE,IAFiC;AAG7CC,kBAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHoB;AAI7CG,kBAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJ0B;AAK7CI,kBAAAA,GAAG,EAAEN,KAAK,CAACM;AALkC,iBAAL;AAAA,eAAnC,CApCC;;AAAA;AAAA,oBA2CF,IAAIC,KAAJ,CAAU,iBAAV,CA3CE;;AAAA;AAAA;AAAA;AA6CV3B,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAM2B,OAAlB;;AA7CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;AAkDA,eAAehC,OAAf","sourcesContent":["const clientId = 'db3a8874dd2d4eda92758c0e163dc98d';\n//const clientSecret = '2eb212bba09640fa9e08432ca4ad9b4a';\nconst redirectURI = 'http://localhost:3000';\n//let accessToken = '';\n\nconst Spotify = {\n  expirationTime: '',\n  accessToken: '',\n  getAccessTokenFromURL() {\n    console.log(\"getAccessTokenFromURL\");\n    this.accessToken = window.location.href.match(\"/.*access_token=([a-zA-Z0-9_-]*)&.*$\")[1];\n    console.log(this.accessToken);\n    //console.log(currentURL.searchParams.get(\"expires_in\"));\n    //console.log(currentURL.searchParams.get(\"access_token\"));\n    //this.expirationTime = currentURL.searchParams.get(\"expires_in\");\n    //this.accessToken = currentURL.searchParams.get(\"access_token\");\n    //console.log(this.accessToken);\n    return this.accessToken;\n  },\n  getAccessToken() {\n    if (this.accessToken || this.getAccessTokenFromURL()) {\n      console.log(\"Found it!\");\n      return this.accessToken;\n    } else {\n      console.log(\"Needs access token\");\n      window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`);\n    }\n  },\n  async search(term) {\n    try {\n      this.accessToken = this.getAccessToken();\n      console.log(this.accessToken);\n      const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`\n        }\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        console.log(jsonResponse);\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      } throw new Error('Request Failed!');\n    } catch(error) {\n      console.log(error.message);\n    }\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}